{
  "version": 3,
  "sources": ["../lib/rational_pq.js", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a rational function (i.e., the ratio of two polynomials described by the coefficients stored in \\\\(P\\\\) and \\\\(Q\\\\)).\n*\n* ## Notes\n*\n* -   Coefficients should be sorted in ascending degree.\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the rational function\n* @returns {number} evaluated rational function\n*/\nfunction evalrational( x ) {\n\tvar ax;\n\tvar s1;\n\tvar s2;\n\tif ( x === 0.0 ) {\n\t\treturn 0.16666666666666666;\n\t}\n\tif ( x < 0.0 ) {\n\t\tax = -x;\n\t} else {\n\t\tax = x;\n\t}\n\tif ( ax <= 1.0 ) {\n\t\ts1 = -351754.9648081514 + (x * (-11561.443576500522 + (x * (-163.72585752598383 + (x * -0.789474443963537))))); // eslint-disable-line max-len\n\t\ts2 = -2110529.7888489086 + (x * (36157.827983443196 + (x * (-277.7110814206028 + (x * 1.0))))); // eslint-disable-line max-len\n\t} else {\n\t\tx = 1.0 / x;\n\t\ts1 = -0.789474443963537 + (x * (-163.72585752598383 + (x * (-11561.443576500522 + (x * -351754.9648081514))))); // eslint-disable-line max-len\n\t\ts2 = 1.0 + (x * (-277.7110814206028 + (x * (36157.827983443196 + (x * -2110529.7888489086))))); // eslint-disable-line max-len\n\t}\n\treturn s1 / s2;\n}\n\n\n// EXPORTS //\n\nmodule.exports = evalrational;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C code, long comment, copyright, license, and constants are from [Cephes]{@link http://www.netlib.org/cephes}. The implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* Copyright 1984, 1995, 2000 by Stephen L. Moshier\n*\n* Some software in this archive may be from the book _Methods and Programs for Mathematical Functions_ (Prentice-Hall or Simon & Schuster International, 1989) or from the Cephes Mathematical Library, a commercial product. In either event, it is copyrighted by the author. What you see here may be used freely but it comes with no support or guarantee.\n*\n* Stephen L. Moshier\n* moshier@na-net.ornl.gov\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nvar PINF = require( '@stdlib/constants-float64-pinf' );\nvar NINF = require( '@stdlib/constants-float64-ninf' );\nvar abs = require( '@stdlib/math-base-special-abs' );\nvar exp = require( '@stdlib/math-base-special-exp' );\nvar LN2 = require( '@stdlib/constants-float64-ln-two' );\nvar rateval = require( './rational_pq.js' );\n\n\n// VARIABLES //\n\n// ln(2^1024)\nvar MAXLOG = 7.09782712893383996843e2;\n\n// ln(2^-1022)\nvar MINLOG = -7.08396418532264106224e2;\n\nvar POS_OVERFLOW = MAXLOG + LN2;\nvar NEG_OVERFLOW = MINLOG - LN2;\n\nvar LARGE = MAXLOG - LN2;\n\n\n// MAIN //\n\n/**\n* Computes the hyperbolic sine of a double-precision floating-point number.\n*\n* ## Method\n*\n* The range is partitioned into two segments. If \\\\( |x| \\le 1 \\\\), we use a rational function of the form\n*\n* ```tex\n* x + x^3 \\frac{\\mathrm{P}(x)}{\\mathrm{Q}(x)}\n* ```\n*\n* Otherwise, the calculation is\n*\n* ```tex\n* \\operatorname{sinh}(x) = \\frac{ e^x - e^{-x} }{2}.\n* ```\n*\n* ## Notes\n*\n* -   Relative error:\n*\n*     | arithmetic | domain   | # trials | peak    | rms     |\n*     |:----------:|:--------:|:--------:|:-------:|:-------:|\n*     | DEC        | +- 88    | 50000    | 4.0e-17 | 7.7e-18 |\n*     | IEEE       | +-MAXLOG | 30000    | 2.6e-16 | 5.7e-17 |\n*\n* @param {number} x - input value\n* @returns {number} hyperbolic sine\n*\n* @example\n* var v = sinh( 0.0 );\n* // returns 0.0\n*\n* @example\n* var v = sinh( 2.0 );\n* // returns ~3.627\n*\n* @example\n* var v = sinh( -2.0 );\n* // returns ~-3.627\n*\n* @example\n* var v = sinh( NaN );\n* // returns NaN\n*/\nfunction sinh( x ) {\n\tvar a;\n\tif ( x === 0.0 ) {\n\t\treturn x; // handles `+-0`\n\t}\n\tif ( x > POS_OVERFLOW || x < NEG_OVERFLOW ) {\n\t\treturn ( x > 0.0 ) ? PINF : NINF;\n\t}\n\ta = abs( x );\n\tif ( a > 1.0 ) {\n\t\tif ( a >= LARGE ) {\n\t\t\ta = exp( 0.5*a );\n\t\t\ta *= 0.5 * a;\n\t\t\tif ( x < 0.0 ) {\n\t\t\t\ta = -a;\n\t\t\t}\n\t\t\treturn a;\n\t\t}\n\t\ta = exp( a );\n\t\ta = (0.5*a) - (0.5/a);\n\t\tif ( x < 0.0 ) {\n\t\t\ta = -a;\n\t\t}\n\t\treturn a;\n\t}\n\ta *= a;\n\treturn x + ( x*a*rateval( a ) );\n}\n\n\n// EXPORTS //\n\nmodule.exports = sinh;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the hyperbolic sine of a double-precision floating-point number.\n*\n* @module @stdlib/math-base-special-sinh\n*\n* @example\n* var sinh = require( '@stdlib/math-base-special-sinh' );\n*\n* var v = sinh( 0.0 );\n* // returns 0.0\n*\n* v = sinh( 2.0 );\n* // returns ~3.627\n*\n* v = sinh( -2.0 );\n* // returns ~-3.627\n*\n* v = sinh( NaN );\n* // returns NaN\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAqCA,SAASC,EAAcC,EAAI,CAC1B,IAAIC,EACAC,EACAC,EACJ,OAAKH,IAAM,EACH,oBAEHA,EAAI,EACRC,EAAK,CAACD,EAENC,EAAKD,EAEDC,GAAM,GACVC,EAAK,mBAAsBF,GAAK,oBAAuBA,GAAK,oBAAuBA,EAAI,oBACvFG,EAAK,sBAAuBH,GAAK,mBAAsBA,GAAK,mBAAsBA,EAAI,MAEtFA,EAAI,EAAMA,EACVE,EAAK,kBAAsBF,GAAK,oBAAuBA,GAAK,oBAAuBA,EAAI,qBACvFG,EAAK,EAAOH,GAAK,mBAAsBA,GAAK,mBAAsBA,EAAI,yBAEhEE,EAAKC,EACb,CAKAL,EAAO,QAAUC,IC/DjB,IAAAK,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAoCA,IAAIC,EAAO,QAAS,gCAAiC,EACjDC,EAAO,QAAS,gCAAiC,EACjDC,EAAM,QAAS,+BAAgC,EAC/CC,EAAM,QAAS,+BAAgC,EAC/CC,EAAM,QAAS,kCAAmC,EAClDC,EAAU,IAMVC,EAAS,iBAGTC,EAAS,mBAETC,EAAeF,EAASF,EACxBK,EAAeF,EAASH,EAExBM,EAAQJ,EAASF,EAkDrB,SAASO,EAAMC,EAAI,CAClB,IAAIC,EACJ,OAAKD,IAAM,EACHA,EAEHA,EAAIJ,GAAgBI,EAAIH,EACnBG,EAAI,EAAQZ,EAAOC,GAE7BY,EAAIX,EAAKU,CAAE,EACNC,EAAI,EACHA,GAAKH,GACTG,EAAIV,EAAK,GAAIU,CAAE,EACfA,GAAK,GAAMA,EACND,EAAI,IACRC,EAAI,CAACA,GAECA,IAERA,EAAIV,EAAKU,CAAE,EACXA,EAAK,GAAIA,EAAM,GAAIA,EACdD,EAAI,IACRC,EAAI,CAACA,GAECA,IAERA,GAAKA,EACED,EAAMA,EAAEC,EAAER,EAASQ,CAAE,GAC7B,CAKAd,EAAO,QAAUY,IC9FjB,IAAIG,EAAO,IAKX,OAAO,QAAUA",
  "names": ["require_rational_pq", "__commonJSMin", "exports", "module", "evalrational", "x", "ax", "s1", "s2", "require_main", "__commonJSMin", "exports", "module", "PINF", "NINF", "abs", "exp", "LN2", "rateval", "MAXLOG", "MINLOG", "POS_OVERFLOW", "NEG_OVERFLOW", "LARGE", "sinh", "x", "a", "main"]
}
